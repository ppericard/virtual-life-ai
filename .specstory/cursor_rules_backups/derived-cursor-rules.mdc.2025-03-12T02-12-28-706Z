
## PROJECT OVERVIEW

This project aims to create "VirtualLife," a life simulator focusing on the computation of generations/turns given a virtual environment, starting individuals/cells, and a set of parameters and rules.  The simulator will allow reproduction of simple models like Conway's Game of Life and exploration of more complex ecological behaviors (predator-prey, mutualism, etc.).  The primary development language will be Python 3, with potential use of C for computationally intensive parts.  Iterative development with continuous delivery is planned.

## CODE STYLE

(To be defined.  PEP 8 should be followed as a starting point.)

## FOLDER ORGANIZATION

(To be defined.  A clear and consistent folder structure will be established to manage the project's files and directories.)

## TECH STACK

- Python 3 (Primary)
- PyPy (Potential)
- C (Potential for computationally intensive tasks)
- (Interface technologies to be determined: Terminal, Web Browser, Android App - future considerations)

## PROJECT-SPECIFIC STANDARDS

- Adhere to the defined code style guidelines.
- Use version control (Git) effectively.
- Follow the established workflow and release rules.
- Prioritize algorithmic optimization over premature implementation optimization.


## WORKFLOW & RELEASE RULES

- Iterative development with continuous delivery.
- (Further details on branching strategy, pull requests, code reviews, etc., to be defined.)


## REFERENCE EXAMPLES

- Conway's Game of Life (as a starting point and simple example)

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- Use Markdown for documentation.
- Maintain a detailed roadmap and specifications document (as exemplified by 2025-03-12_10-00-virtuallife-project-roadmap-and-specifications.md).

## DEBUGGING

(To be defined.  Establish debugging strategies and tools as needed.)

## FINAL DOs AND DON'Ts

- **DO:** Prioritize algorithmic optimization.
- **DO:** Use version control effectively.
- **DO:** Follow the established workflow and release rules.
- **DO:** Write clear and concise code.
- **DO:** Document your code thoroughly.
- **DON'T:** Introduce unnecessary complexity prematurely.
- **DON'T:** Neglect testing.